diff --git a/src/liblzma/check/crc32_fast.c b/src/liblzma/check/crc32_fast.c
index f492cdff..094fe196 100644
--- a/src/liblzma/check/crc32_fast.c
+++ b/src/liblzma/check/crc32_fast.c
@@ -15,7 +15,7 @@
 #include "crc_common.h"
 
 #if defined(CRC_X86_CLMUL)
-#	define BUILDING_CRC32_CLMUL
+#	define BUILDING_CRC_CLMUL 32
 #	include "crc_x86_clmul.h"
 #elif defined(CRC32_ARM64)
 #	include "crc32_arm64.h"
diff --git a/src/liblzma/check/crc64_fast.c b/src/liblzma/check/crc64_fast.c
index 43f3f3ad..e5d162a0 100644
--- a/src/liblzma/check/crc64_fast.c
+++ b/src/liblzma/check/crc64_fast.c
@@ -14,7 +14,7 @@
 #include "crc_common.h"
 
 #if defined(CRC_X86_CLMUL)
-#	define BUILDING_CRC64_CLMUL
+#	define BUILDING_CRC_CLMUL 64
 #	include "crc_x86_clmul.h"
 #endif
 
diff --git a/src/liblzma/check/crc_x86_clmul.h b/src/liblzma/check/crc_x86_clmul.h
index 6ff104f3..8a1e3903 100644
--- a/src/liblzma/check/crc_x86_clmul.h
+++ b/src/liblzma/check/crc_x86_clmul.h
@@ -14,10 +14,8 @@
 /// (URLs were checked on 2023-10-14).
 ///
 /// While this file has both CRC32 and CRC64 implementations, only one
-/// should be built at a time to ensure that crc_simd_body() is inlined
-/// even with compilers with which lzma_always_inline expands to plain inline.
-/// The version to build is selected by defining BUILDING_CRC32_CLMUL or
-/// BUILDING_CRC64_CLMUL before including this file.
+/// can be built at a time. The version to build is selected by defining
+/// BUILDING_CRC_CLMUL to 32 or 64 before including this file.
 ///
 /// FIXME: Builds for 32-bit x86 use the assembly .S files by default
 /// unless configured with --disable-assembler. Even then the lookup table
@@ -37,6 +35,10 @@
 #endif
 #define LZMA_CRC_X86_CLMUL_H
 
+#if BUILDING_CRC_CLMUL != 32 && BUILDING_CRC_CLMUL != 64
+#	error BUILDING_CRC_CLMUL is undefined or has an invalid value
+#endif
+
 #include <immintrin.h>
 
 #if defined(_MSC_VER)
@@ -211,7 +213,7 @@ crc_simd_body(const uint8_t *buf, const size_t size, __m128i *v0, __m128i *v1,
 // x86 CLMUL CRC32 //
 /////////////////////
 
-#ifdef BUILDING_CRC32_CLMUL
+#if BUILDING_CRC_CLMUL == 32
 
 crc_attr_target
 static uint32_t
@@ -239,14 +241,14 @@ crc32_arch_optimized(const uint8_t *buf, size_t size, uint32_t crc)
 	v0 = _mm_xor_si128(v0, v1);
 	return ~(uint32_t)_mm_extract_epi32(v0, 2);
 }
-#endif // BUILDING_CRC32_CLMUL
+#endif // BUILDING_CRC_CLMUL == 32
 
 
 /////////////////////
 // x86 CLMUL CRC64 //
 /////////////////////
 
-#ifdef BUILDING_CRC64_CLMUL
+#if BUILDING_CRC_CLMUL == 64
 
 // MSVC (VS2015 - VS2022) produces bad 32-bit x86 code from the CLMUL CRC
 // code when optimizations are enabled (release build). According to the bug
@@ -309,7 +311,7 @@ crc64_arch_optimized(const uint8_t *buf, size_t size, uint64_t crc)
 #	pragma optimize("", on)
 #endif
 
-#endif // BUILDING_CRC64_CLMUL
+#endif // BUILDING_CRC_CLMUL == 64
 
 
 // Inlining this function duplicates the function body in crc32_resolve() and
