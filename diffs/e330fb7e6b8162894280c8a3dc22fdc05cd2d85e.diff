diff --git a/src/liblzma/lz/lz_decoder.c b/src/liblzma/lz/lz_decoder.c
index e91ad81c..350b1f89 100644
--- a/src/liblzma/lz/lz_decoder.c
+++ b/src/liblzma/lz/lz_decoder.c
@@ -39,15 +39,15 @@ struct lzma_coder_s {
 	/// marker. This may become true before next_finished becomes true.
 	bool this_finished;
 
-        /// Temporary buffer needed when the LZ-based filter is not the last
-        /// filter in the chain. The output of the next filter is first
-        /// decoded into buffer[], which is then used as input for the actual
-        /// LZ-based decoder.
-        struct {
-                size_t pos;
-                size_t size;
-                uint8_t buffer[LZMA_BUFFER_SIZE];
-        } temp;
+	/// Temporary buffer needed when the LZ-based filter is not the last
+	/// filter in the chain. The output of the next filter is first
+	/// decoded into buffer[], which is then used as input for the actual
+	/// LZ-based decoder.
+	struct {
+		size_t pos;
+		size_t size;
+		uint8_t buffer[LZMA_BUFFER_SIZE];
+	} temp;
 };
 
 
diff --git a/src/liblzma/lzma/lzma2_encoder.c b/src/liblzma/lzma/lzma2_encoder.c
index aa3216cc..eda4aa9f 100644
--- a/src/liblzma/lzma/lzma2_encoder.c
+++ b/src/liblzma/lzma/lzma2_encoder.c
@@ -274,9 +274,9 @@ static lzma_ret
 lzma2_encoder_options_update(lzma_coder *coder, const lzma_filter *filter)
 {
 	// New options can be set only when there is no incomplete chunk.
-        // This is the case at the beginning of the raw stream and right
-        // after LZMA_SYNC_FLUSH.
-        if (filter->options == NULL || coder->sequence != SEQ_INIT)
+	// This is the case at the beginning of the raw stream and right
+	// after LZMA_SYNC_FLUSH.
+	if (filter->options == NULL || coder->sequence != SEQ_INIT)
 		return LZMA_PROG_ERROR;
 
 	// Look if there are new options. At least for now,
diff --git a/src/liblzma/lzma/lzma_encoder_optimum_normal.c b/src/liblzma/lzma/lzma_encoder_optimum_normal.c
index 4e3754b0..5772b449 100644
--- a/src/liblzma/lzma/lzma_encoder_optimum_normal.c
+++ b/src/liblzma/lzma/lzma_encoder_optimum_normal.c
@@ -531,7 +531,7 @@ helper2(lzma_coder *coder, uint32_t *reps, const uint8_t *buf,
 	const uint32_t cur_and_1_price = cur_price
 			+ rc_bit_0_price(coder->is_match[state][pos_state])
 			+ get_literal_price(coder, position, buf[-1],
-        		!is_literal_state(state), match_byte, current_byte);
+			!is_literal_state(state), match_byte, current_byte);
 
 	bool next_is_literal = false;
 
