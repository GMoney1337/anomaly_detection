diff --git a/src/xz/xz.1 b/src/xz/xz.1
index 79cca649..5b880e81 100644
--- a/src/xz/xz.1
+++ b/src/xz/xz.1
@@ -2554,7 +2554,7 @@ is run by a script or tool, for example, GNU
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 XZ_OPT=\-2v tar caf foo.tar.xz foo
 .ft R
 .fi
@@ -2574,7 +2574,7 @@ scripts one may use something like this:
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 XZ_OPT=${XZ_OPT\-"\-7e"}
 export XZ_OPT
 .ft R
@@ -2832,7 +2832,7 @@ if compression is successful:
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 xz foo
 .ft R
 .fi
@@ -2848,7 +2848,7 @@ even if decompression is successful:
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 xz \-dk bar.xz
 .ft R
 .fi
@@ -2866,7 +2866,7 @@ and 5\ MiB, respectively):
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 tar cf \- baz | xz \-4e > baz.tar.xz
 .ft R
 .fi
@@ -2877,7 +2877,7 @@ to standard output with a single command:
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 xz \-dcf a.txt b.txt.xz c.txt d.txt.lzma > abcd.txt
 .ft R
 .fi
@@ -2892,7 +2892,7 @@ can be used to parallelize compression of many files:
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 find . \-type f \e! \-name '*.xz' \-print0 \e
     | xargs \-0r \-P4 \-n16 xz \-T1
 .ft R
@@ -2932,7 +2932,7 @@ after compressing multiple files:
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 xz \-\-robot \-\-list *.xz | awk '/^totals/{print $5\-$4}'
 .ft R
 .fi
@@ -2952,7 +2952,7 @@ option:
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 if ! eval "$(xz \-\-robot \-\-version 2> /dev/null)" ||
         [ "$XZ_VERSION" \-lt 50000002 ]; then
     echo "Your xz is too old."
@@ -2968,7 +2968,7 @@ but if a limit has already been set, don't increase it:
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 NEWLIM=$((123 << 20))\ \ # 123 MiB
 OLDLIM=$(xz \-\-robot \-\-info\-memory | cut \-f3)
 if [ $OLDLIM \-eq 0 \-o $OLDLIM \-gt $NEWLIM ]; then
@@ -3021,7 +3021,7 @@ can be modified to use a bigger dictionary:
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 xz \-\-lzma2=preset=1,dict=32MiB foo.tar
 .ft R
 .fi
@@ -3049,7 +3049,7 @@ would use:
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 xz \-vv \-\-lzma2=dict=192MiB big_foo.tar
 .ft R
 .fi
@@ -3079,7 +3079,7 @@ using about 100\ KiB of memory.
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 xz \-\-check=crc32 \-\-lzma2=preset=6e,dict=64KiB foo
 .ft R
 .fi
@@ -3107,7 +3107,7 @@ slightly (like 0.1\ %) smaller file than
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 xz \-\-lzma2=preset=6e,pb=0,lc=4 source_code.tar
 .ft R
 .fi
@@ -3120,7 +3120,7 @@ using the x86 BCJ filter:
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 xz \-\-x86 \-\-lzma2 libfoo.so
 .ft R
 .fi
@@ -3155,7 +3155,7 @@ to LZMA2 to accommodate the three-byte alignment:
 .RS
 .PP
 .nf
-.ft CW
+.ft CR
 xz \-\-delta=dist=3 \-\-lzma2=pb=0 foo.tiff
 .ft R
 .fi
