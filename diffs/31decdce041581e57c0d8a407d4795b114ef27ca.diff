diff --git a/tests/files/README b/tests/files/README
index a8516f2a..392ff768 100644
--- a/tests/files/README
+++ b/tests/files/README
@@ -97,7 +97,7 @@
     how this file handled (it may reject it, or decode it possibly with
     a warning).
 
-    unsupported-block_header.xz has a non-nul byte in Header Padding,
+    unsupported-block_header.xz has a non-null byte in Header Padding,
     which may indicate presence of a new unsupported field.
 
     unsupported-filter_flags-1.xz has unsupported Filter ID 0x7F.
@@ -177,25 +177,26 @@
     bad-1-block_header-3.xz has wrong CRC32 in Block Header.
 
     bad-1-block_header-4.xz has too big Compressed Size in Block Header
-    (2^64 - 1 bytes while maximum is a little less, because the whole
-    Block must stay smaller than 2^64). It's important that the file
+    (2^63 - 1 bytes while maximum is a little less, because the whole
+    Block must stay smaller than 2^63). It's important that the file
     gets rejected due to invalid Compressed Size value; the decoder
     must not try decoding the Compressed Data field.
 
     bad-1-block_header-5.xz has zero as Compressed Size in Block Header.
 
-    bad-2-index-1.xz has wrong Total Sizes in Index.
+    bad-2-index-1.xz has wrong Unpadded Sizes in Index.
 
     bad-2-index-2.xz has wrong Uncompressed Sizes in Index.
 
-    bad-2-index-3.xz has non-nul byte in Index Padding.
+    bad-2-index-3.xz has non-null byte in Index Padding.
 
     bad-2-index-4.xz wrong CRC32 in Index.
 
-    bad-2-index-5.xz has zero as Total Size. It is important that the file
-    gets rejected specifically due to Total Size having an invalid value.
+    bad-2-index-5.xz has zero as Unpadded Size. It is important that the
+    file gets rejected specifically due to Unpadded Size having an invalid
+    value.
 
-    bad-2-compressed_data_padding.xz has non-nul byte in the padding of
+    bad-2-compressed_data_padding.xz has non-null byte in the padding of
     the Compressed Data field of the first Block.
 
     bad-1-check-crc32.xz has wrong Check (CRC32).
